{"version":3,"sources":["components/CurrentWeather.js","components/Forecast.js","components/Header.js","App.js","index.js"],"names":["CurrentWeather","this","props","currentWeather","tempF","tempC","feelF","feelC","windDir","windSpdM","windSpdK","desc","icon","precipI","precipM","imperial","locationData","city","state","className","Math","round","src","alt","Component","Forecast","todForecast","forecast","tomForecast","dayForecast","highF","highC","lowF","lowC","rain","snow","totalPrecip_in","totalPrecip_mm","Moment","date","format","Header","onSubmit","e","updateWeather","htmlFor","name","placeholder","onChange","changeLocation","target","value","type","onClick","handleClick","api_key","process","App","location","latitude","longitude","displayForecast","inputData","setState","forceUpdate","handleChange","event","preventDefault","length","Axios","get","then","res","loc","data","cur","current","forecastArray","forecastday","forEach","day","updatedForecast","maxtemp_f","maxtemp_c","mintemp_f","mintemp_c","daily_chance_of_snow","daily_chance_of_rain","totalprecip_in","totalprecip_mm","condition","text","maxwind_kph","maxwind_mph","push","temp_f","temp_c","feelslike_f","feelslike_c","wind_dir","wind_mph","wind_kph","precip_in","precip_mm","region","catch","error","alert","navigator","geolocation","getCurrentPosition","newLocation","coords","getData","code","PERMISSION_DENIED","React","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.77fe12db.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport '../styles/currentweather.css';\r\n\r\n\r\nexport default class CurrentWeather extends Component {\r\n\r\n    render() {\r\n        const { tempF, tempC, feelF, feelC, windDir, windSpdM, windSpdK, desc, icon, precipI, precipM } = this.props.currentWeather;\r\n        const imperial = this.props.imperial;\r\n        const { city, state } = this.props.locationData;\r\n\r\n        return (\r\n            <div className=\"currentWeather\">\r\n                <div className=\"selectedLocation\">\r\n                    <h2>{city}, {state}</h2>\r\n                </div>\r\n                <div className=\"temp\">\r\n                    <h2>{imperial && Math.round(tempF)}{!imperial && Math.round(tempC)}&deg;{imperial && \"F\"}{!imperial && \"C\"}</h2>\r\n                    <div className=\"realfeel\">\r\n                        Feels like: {imperial && Math.round(feelF)}{!imperial && Math.round(feelC)}&deg;\r\n                    </div>\r\n                </div>\r\n                <div className=\"desc_container\">\r\n                    <div className=\"iconFrame\">\r\n                        <img src={icon} alt=\"weather icon\"></img>\r\n                    </div>\r\n                    <div className=\"description\">\r\n                        {desc}\r\n                    </div>\r\n                </div>\r\n                <div className=\"current_group\">\r\n                    <div className=\"precip\">\r\n                        Precipitation:\r\n                        <div className=\"total\">\r\n                            {imperial && precipI + \" in\"}{!imperial && precipM + \" mm\"}\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"windSpd\">\r\n                        Wind Speed:\r\n                        <div>\r\n                            {imperial && windSpdM + \" mph\"}{!imperial && windSpdK + \" kph\"}\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"windDir\">\r\n                        Wind Direction:\r\n                        <div>\r\n                            {windDir}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport '../styles/forecastweather.css';\r\nimport Moment from 'moment';\r\n\r\nexport default class Forecast extends Component {\r\n\r\n    render() {\r\n        //today data\r\n        const todForecast = this.props.forecast[0];\r\n        //tomorrow data\r\n        const tomForecast = this.props.forecast[1];\r\n        //day after tomorrow data\r\n        const dayForecast = this.props.forecast[2];\r\n        const imperial = this.props.imperial;\r\n\r\n        return (\r\n            <div className=\"forecastContainer\">\r\n                <div className=\"forecastday\">\r\n                    <div>\r\n                        <h3>Today</h3>\r\n                        <div className=\"description\">\r\n                            <img src={todForecast.icon} alt=\"weather icon\"></img>\r\n                            {todForecast.desc}\r\n                        </div>\r\n                        <div className=\"forecastTemp\">\r\n                            <p>High: {imperial && Math.round(todForecast.highF)}{!imperial && Math.round(todForecast.highC)}</p>\r\n                            <p>Low: {imperial && Math.round(todForecast.lowF)}{!imperial && Math.round(todForecast.lowC)}</p>\r\n                        </div>\r\n                        <div className=\"precip\">\r\n                            <p>Chance of Rain: {todForecast.rain}%</p>\r\n                            <p>Chance of Snow: {todForecast.snow}%</p>\r\n                            <p>Expected Precipitation: {imperial && todForecast.totalPrecip_in + \"in\"}{!imperial && todForecast.totalPrecip_mm + \"mm\"}</p>\r\n                        </div>\r\n                        <div className=\"wind\">\r\n                            Wind: {imperial && todForecast.windSpdM + \"mph\"}{!imperial && todForecast.windSpdK + \"kph\"}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"forecastday\">\r\n                    <h3> {Moment(tomForecast.date).format('MM/DD/YYYY')}</h3>\r\n                    <div className=\"description\">\r\n                        <img src={tomForecast.icon} alt=\"weather icon\"></img>\r\n                        {todForecast.desc}\r\n                    </div>\r\n                    <div className=\"forecastTemp\">\r\n                        <p>High: {imperial && Math.round(tomForecast.highF)}{!imperial && Math.round(tomForecast.highC)}</p>\r\n                        <p>Low: {imperial && Math.round(tomForecast.lowF)}{!imperial && Math.round(tomForecast.lowC)}</p>\r\n                    </div>\r\n                    <div className=\"precip\">\r\n                        <p>Chance of Rain: {tomForecast.rain}%</p>\r\n                        <p>Chance of Snow: {tomForecast.snow}%</p>\r\n                        <p>Expected Precipitation: {imperial && tomForecast.totalPrecip_in + \"in\"}{!imperial && tomForecast.totalPrecip_mm + \"mm\"}</p>\r\n                    </div>\r\n                    <div className=\"wind\">\r\n                        Wind: {imperial && tomForecast.windSpdM + \"mph\"}{!imperial && tomForecast.windSpdK + \"kph\"}\r\n                    </div>\r\n                </div>\r\n                <div className=\"forecastday\">\r\n                    <h3>{Moment(dayForecast.date).format('MM/DD/YYYY')}</h3>\r\n                    <div className=\"description\">\r\n                        <img src={dayForecast.icon} alt=\"weather icon\"></img>\r\n                        {dayForecast.desc}\r\n                    </div>\r\n                    <div className=\"forecastTemp\">\r\n                        <p>High: {imperial && Math.round(dayForecast.highF)}{!imperial && Math.round(dayForecast.highC)}</p>\r\n                        <p>Low: {imperial && Math.round(dayForecast.lowF)}{!imperial && Math.round(dayForecast.lowC)}</p>\r\n                    </div>\r\n                    <div className=\"precip\">\r\n                        <p>Chance of Rain: {dayForecast.rain}%</p>\r\n                        <p>Chance of Snow: {dayForecast.snow}%</p>\r\n                        <p>Expected Precipitation: {imperial && dayForecast.totalPrecip_in + \"in\"}{!imperial && dayForecast.totalPrecip_mm + \"mm\"}</p>\r\n                    </div>\r\n                    <div className=\"wind\">\r\n                        Wind: {imperial && dayForecast.windSpdM + \"mph\"}{!imperial && dayForecast.windSpdK + \"kph\"}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\r\nimport '../styles/header.css';\r\n\r\nexport default function Header(props) {\r\n\r\n    return (\r\n        <div className=\"header\">\r\n            <h1 className=\"title\">WeatherSpotter</h1>\r\n            <form className=\"location\" onSubmit={(e) => { props.updateWeather(e) }}>\r\n                <label htmlFor=\"location\">Search Location: </label>\r\n                <input className=\"location_input\" name=\"location\" placeholder=\"City/Zip\" onChange={(e) => props.changeLocation(e.target.value)}></input>\r\n                <input className=\"submit\" type=\"submit\"></input>\r\n            </form>\r\n            <div className=\"toggleContainer\">\r\n                <button className=\"toggleUnits\" onClick={(e) => props.handleClick(e)}>Imperial/Metric</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\nimport './styles/App.css';\nimport Axios from 'axios';\nimport CurrentWeather from './components/CurrentWeather';\nimport Forecast from './components/Forecast';\nimport Header from './components/Header';\n\nconst api_key = process.env.REACT_APP_API_KEY\n\nclass App extends React.Component {\n\n  state = {\n    //default location = Minneapolis, MN\n    location: {\n      latitude: 44.9778,\n      longitude: -93.2650\n    },\n    //current weather and forecast data collected by API\n    locationData: {},\n    currentWeather: {},\n    forecast: [],\n    imperial: true,\n    //Forecast array is undefined, delaying display of Forecast component until after array is populated\n    displayForecast: false,\n    //data from location input in header\n    inputData: \"\"\n  }\n\n  getData() {\n    //API call for Forecast\n    Axios.get(`http://api.weatherapi.com/v1/forecast.json?key=${api_key}&q=${this.state.location.latitude},${this.state.location.longitude}&days=3`).then(res => {\n\n      //location data\n      var loc = res.data.location;\n      //current data\n      var cur = res.data.current;\n      //set up array to hold 3 day forecast\n      const array = res.data.forecast.forecastday;\n      //for each day in forecast, gather specific data and push it to the forecast state\n      array.forEach((day) => {\n        let forecastArray = {\n          //high temp: Fahrenheight & Celsius\n          highF: day.day.maxtemp_f,\n          highC: day.day.maxtemp_c,\n          //low temp: Fahrenheight & Celsius\n          lowF: day.day.mintemp_f,\n          lowC: day.day.mintemp_c,\n          //chance of rain or snow\n          snow: day.day.daily_chance_of_snow,\n          rain: day.day.daily_chance_of_rain,\n          //total precip in inches & millimeters\n          totalPrecip_in: day.day.totalprecip_in,\n          totalPrecip_mm: day.day.totalprecip_mm,\n          //description & icon\n          desc: day.day.condition.text,\n          icon: day.day.condition.icon,\n          //windspeed kph & mph\n          windSpdK: day.day.maxwind_kph,\n          windSpdM: day.day.maxwind_mph,\n          date: day.date\n        }\n\n        this.state.forecast.push(forecastArray);\n      });\n\n\n      let currentWeather = {\n        //temperature Fahrenheight & Celsius\n        tempF: cur.temp_f,\n        tempC: cur.temp_c,\n        //temperature feels like: Fahrenheight & Celsius\n        feelF: cur.feelslike_f,\n        feelC: cur.feelslike_c,\n        //wind direction/speed: kph & mph\n        windDir: cur.wind_dir,\n        windSpdM: cur.wind_mph,\n        windSpdK: cur.wind_kph,\n        //weather description & icon\n        desc: cur.condition.text,\n        icon: cur.condition.icon,\n        //precipitation: inches and millimeters\n        precipI: cur.precip_in,\n        precipM: cur.precip_mm\n      }\n\n      //store weather data from API call\n      let locationData = {\n        city: loc.name,\n        state: loc.region,\n      }\n\n      //add data to state\n      this.setState({\n        locationData: locationData,\n        currentWeather: currentWeather,\n        //Forecast array is undefined, delaying display of Forecast component until after array is populated\n        displayForecast: true\n      });\n    })\n  }\n\n  componentDidMount() {\n    //request location\n    navigator.geolocation.getCurrentPosition((location) => {\n\n      //store user's lat and long\n      let newLocation = {\n        latitude: location.coords.latitude,\n        longitude: location.coords.longitude\n      }\n      //Set new location to users latitude/longitude\n      this.setState({\n        location: newLocation\n      })\n\n      //retrieve and set state for current location\n      this.getData();\n\n    }, (error) => {\n      //if there is an error with getting permission (permission denied), get and set states for default location\n      if (error.code === error.PERMISSION_DENIED) {\n        this.getData();\n      }\n    });\n  }\n\n  //button toggles between metric and imperial units\n  handleClick = () => {\n    let imperial = this.state.imperial;\n    this.setState({ imperial: !imperial });\n    this.forceUpdate();\n  }\n\n  //update inputData with information from header location input\n  handleChange = (value) => {\n    this.setState({\n      inputData: value\n    })\n  }\n\n  updateWeather = (event) => {\n    event.preventDefault();\n\n    //If the input is empty, do not make the api call\n    if (this.state.inputData.length >= 1) {\n      //API Call\n      Axios.get(`http://api.weatherapi.com/v1/forecast.json?key=${api_key}&q=${this.state.inputData}&days=3`).then(res => {\n\n        //location data\n        var loc = res.data.location;\n        //current data\n        var cur = res.data.current;\n        //create empty array to store forecast data in\n        var forecastArray = [];\n        //set up array to hold 3 day forecast\n        const array = res.data.forecast.forecastday;\n        //for each day in forecast, gather specific data and push it to the forecast state\n        array.forEach((day) => {\n          let updatedForecast = {\n            //high temp: Fahrenheight & Celsius\n            highF: day.day.maxtemp_f,\n            highC: day.day.maxtemp_c,\n            //low temp: Fahrenheight & Celsius\n            lowF: day.day.mintemp_f,\n            lowC: day.day.mintemp_c,\n            //chance of rain or snow\n            snow: day.day.daily_chance_of_snow,\n            rain: day.day.daily_chance_of_rain,\n            //total precip in inches & millimeters\n            totalPrecip_in: day.day.totalprecip_in,\n            totalPrecip_mm: day.day.totalprecip_mm,\n            //description & icon\n            desc: day.day.condition.text,\n            icon: day.day.condition.icon,\n            //windspeed kph & mph\n            windSpdK: day.day.maxwind_kph,\n            windSpdM: day.day.maxwind_mph,\n            date: day.date\n          }\n          forecastArray.push(updatedForecast);\n        });\n\n\n        let currentWeather = {\n          //temperature Fahrenheight & Celsius\n          tempF: cur.temp_f,\n          tempC: cur.temp_c,\n          //temperature feels like: Fahrenheight & Celsius\n          feelF: cur.feelslike_f,\n          feelC: cur.feelslike_c,\n          //wind direction/speed: kph & mph\n          windDir: cur.wind_dir,\n          windSpdM: cur.wind_mph,\n          windSpdK: cur.wind_kph,\n          //weather description & icon\n          desc: cur.condition.text,\n          icon: cur.condition.icon,\n          //precipitation: inches and millimeters\n          precipI: cur.precip_in,\n          precipM: cur.precip_mm\n        }\n\n        //store weather data from API call\n        let locationData = {\n          city: loc.name,\n          state: loc.region,\n        }\n\n        //add data to state\n        this.setState({\n          locationData: locationData,\n          currentWeather: currentWeather,\n          forecast: forecastArray,\n          //Forecast array is undefined, delaying display of Forecast component until after array is populated\n          displayForecast: true\n        })\n      })\n        //if input isn't empty, but location can't be found, display this alert\n        .catch(function (error) {\n          alert(\"*QUACK!* After much deliberation, we regret to inform you that the council of rubber duckies has determined the location you are looking for does not exist. Please try searching for a location currently in existence.\")\n        });\n    }\n    //if the input is empty, alert the user\n    else if (this.state.inputData.length < 1) {\n      alert(\"I am not a mind reader. Please enter the location you would like to search for.\");\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Header changeLocation={this.handleChange} updateWeather={this.updateWeather} handleClick={this.handleClick} imperial={this.state.imperial} />\n        <h2 className=\"componentTitle\">Current Conditions</h2>\n        <CurrentWeather locationData={this.state.locationData} currentWeather={this.state.currentWeather} imperial={this.state.imperial} />\n        <h2 className=\"componentTitle\">3-Day Forecast</h2>\n        {this.state.displayForecast && <Forecast forecast={this.state.forecast} imperial={this.state.imperial} />}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}